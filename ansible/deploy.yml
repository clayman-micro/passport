---

- hosts: localhost
  tasks:
    - name: Prepare folder for credentials
      file:
        path: "{{ inventory_dir }}/.credentials/{{ item }}/users/{{ hostvars[item]['ansible_user'] }}/"
        state: directory
        mode: 0755
      with_items: "{{ groups['servers'] }}"

    - name: Download private keys for servers
      hashivault_read:
        mount_point: "secrets"
        secret: "nodes/{{ item }}/users/{{ hostvars[item]['ansible_user'] }}"
        key: 'private_key'
        version: 2
      with_items: "{{ groups['servers'] }}"
      loop_control:
        label: "{{ item }}"
      register: 'private_keys'

    - name: Write private key to file
      copy:
        content: "{{ item.value }}"
        dest: "{{ inventory_dir }}/.credentials/{{ item.item }}/users/{{ hostvars[item.item]['ansible_user'] }}/id_rsa"
        mode: 0600
      with_items: "{{ private_keys.results }}"
      loop_control:
        label: "{{ item.item }}"


- hosts: servers
  become: true

  vars:
    domain: clayman.pro

    consul_host: "consul.service.consul"
    consul_port: "8500"

    postgres_host: "postgresql.service.consul"
    postgres_port: "5432"
    postgres_user: "passport"
    postgres_password: "{{ lookup('hashivault', 'services/passport', 'postgres_password', mount_point='/secrets', version=2) }}"
    postgres_database: "passport"

    docker_username: "{{ lookup('env','DOCKER_USERNAME') }}"
    docker_password: "{{ lookup('env','DOCKER_PASSWORD') }}"

    private_network: "{{ ansible_eth1['ipv4'] }}"

    services_dir: /opt/services

    passport_conf_dir: "{{ services_dir }}/passport/conf.d"

    passport_domain: "passport.{{ domain }}"
    passport_sentry_dsn: "{{ lookup('hashivault', 'services/passport', 'sentry_dsn', mount_point='/secrets', version=2) }}"

    passport_jwt_private_key: "{{ lookup('hashivault', 'services/passport', 'jwt_private_key', mount_point='/secrets', version=2) }}"
    passport_jwt_public_key: "{{ lookup('hashivault', 'services/passport', 'jwt_public_key', mount_point='/secrets', version=2) }}"

    passport_image: ghcr.io/clayman-micro/passport
    passport_version: "{{ lookup('env','PASSPORT_VERSION')|default('latest') }}"

    passport_replicas: 1

  tasks:
    - name: Prepare service folder
      file: path={{ item }} state=directory mode=755
      with_items:
        - "{{ passport_conf_dir }}"

    - name: Write JWT keys to files
      copy:
        content: "{{ item.content }}"
        dest: "{{ passport_conf_dir }}/{{ item.dest }}"
        mode: 0600
      with_items:
        - content: "{{ passport_jwt_private_key }}"
          dest: passport.key
        - content: "{{ passport_jwt_public_key }}"
          dest: passport.key.pub
      loop_control:
        label: "{{ item.dest }}"

    - name: Add JWT private key to secrets
      docker_secret:
        name: passport_jwt_private_key
        data: "{{ passport_jwt_private_key }}"
        state: present

    - name: Add JWT public key to secrets
      docker_secret:
        name: passport_jwt_public_key
        data: "{{ passport_jwt_public_key }}"
        state: present

    - name: Log into private registry
      docker_login:
        registry: ghcr.io
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"

    - name: Pull image
      docker_image:
        name: "{{ passport_image }}:{{ passport_version }}"
        source: pull

    - name: Apply database migrations
      docker_container:
        name: passport_migrations
        image: "{{ passport_image }}:{{ passport_version }}"
        command: --conf-dir=/etc/passport storage upgrade
        dns_servers:
          - "{{ private_network.address }}"
        env:
          CONSUL_HOST: "{{ consul_host }}"
          CONSUL_PORT: "{{ consul_port }}"
          POSTGRES_HOST: "{{ postgres_host }}"
          POSTGRES_PORT: "{{ postgres_port }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DATABASE: "{{ postgres_database }}"
          SENTRY_DSN: "{{ passport_sentry_dsn }}"
          SESSION_DOMAIN: ".{{ domain }}"
        networks:
          - name: backend
        volumes:
          - "{{ passport_conf_dir }}:/etc/passport"

    - name: Update service
      docker_swarm_service:
        name: passport
        image: "{{ passport_image }}:{{ passport_version }}"
        command: python3 -m passport --conf-dir=/etc/passport server run --host=0.0.0.0
        args:
          - "--tags={{ env }}"
          - "--tags=traefik.enable=true"
          - "--tags=traefik.http.routers.passport.rule=Host(`{{ passport_domain }}`)"
          - "--tags=traefik.http.routers.passport.entrypoints=web"
          - "--tags=traefik.http.routers.passport.service=passport"
          - "--tags=traefik.http.routers.passport.middlewares=passport-redirect@consulcatalog"
          - "--tags=traefik.http.middlewares.passport-redirect.redirectscheme.scheme=https"
          - "--tags=traefik.http.middlewares.passport-redirect.redirectscheme.permanent=true"
          - "--tags=traefik.http.routers.passport-secure.rule=Host(`{{ passport_domain }}`)"
          - "--tags=traefik.http.routers.passport-secure.entrypoints=websecure"
          - "--tags=traefik.http.routers.passport-secure.service=passport"
          - "--tags=traefik.http.routers.passport-secure.tls=true"
          - "--tags=traefik.http.routers.passport-secure.tls.certresolver=acmeresolver"
        dns:
          - "{{ private_network.address }}"
        env:
          CONSUL_HOST: "{{ consul_host }}"
          CONSUL_PORT: "{{ consul_port }}"
          POSTGRES_HOST: "{{ postgres_host }}"
          POSTGRES_PORT: "{{ postgres_port }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DATABASE: "{{ postgres_database }}"
          SENTRY_DSN: "{{ passport_sentry_dsn }}"
        logging:
          driver: syslog
          options:
            syslog-address: unixgram:///dev/log
            tag: passport
        networks:
          - backend
        replicas: "{{ passport_replicas|default(1) }}"
        secrets:
          - secret_name: "passport_jwt_private_key"
            filename: "/etc/passport/passport.key"
            mode: 0600
          - secret_name: "passport_jwt_public_key"
            filename: "/etc/passport/passport.key.pub"
            mode: 0644
